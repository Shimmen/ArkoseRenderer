#version 460

#include <common/namedUniforms.glsl>
#include <common/random.glsl>
#include <common/spherical.glsl>
#include <pathtracer/common.glsl>
#include <shared/CameraState.h>

layout(set = 0, binding = 0) uniform AccelerationStructure topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2) uniform sampler2D environmentMap;
layout(set = 0, binding = 3, rgba16f) uniform image2D pathTraceImage;

NAMED_UNIFORMS_STRUCT(PathTracerPushConstants, constants)

layout(location = 0) rayPayload PathTracerRayPayload payload;

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray createCameraRay()
{
    // Stratify rays for basic anti-aliasing
    vec2 intraPixelOffset = vec2(pt_randomFloat(payload), pt_randomFloat(payload));

    const vec2 pixelCenter = vec2(rt_LaunchID.xy) + vec2(0.5);
    const vec2 inUV = (pixelCenter + intraPixelOffset) / vec2(rt_LaunchSize.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = camera.worldFromView * vec4(0, 0, 0, 1);
    vec4 target = camera.viewFromProjection * vec4(d.x, d.y, 1.0, 1.0);
    vec4 direction = camera.worldFromView * vec4(normalize(target.xyz / target.w), 0.0);

    Ray cameraRay;
    cameraRay.origin = origin.xyz;
    cameraRay.direction = direction.xyz;
    return cameraRay;
}

bool doTraceRay(vec3 rayOrigin, vec3 rayDirection, float tmin, float tmax)
{
    uint rayFlags = RayFlags_None;
    uint cullMask = RT_HIT_MASK_OPAQUE | RT_HIT_MASK_MASKED;// | RT_HIT_MASK_BLEND;

    payload.hitT = tmax + 1.0;
    traceRay(topLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, rayDirection, tmax, 0);
    return payload.hitT <= tmax;
}

void main()
{
    uint uniquePixelFrameId = (rt_LaunchID.x + rt_LaunchID.y * rt_LaunchSize.x) + constants.frameIndex * (rt_LaunchSize.x * rt_LaunchSize.y);
    payload.rngState = wang_hash(uniquePixelFrameId);

    Ray ray = createCameraRay();
    float tmin = camera.zNear;
    float tmax = camera.zFar;

    const int maxRayRepth = 16;

    payload.attenuation = vec3(1.0);
    payload.color = vec3(0.0);
    payload.scatteredDirectionPdf = 1.0;

    for (int rayDepth = 0; rayDepth < maxRayRepth && lengthSquared(payload.attenuation) > 0.00001; ++rayDepth) {
        if (doTraceRay(ray.origin, ray.direction, tmin, tmax)) {
            ray.origin = ray.origin + abs(payload.hitT) * ray.direction;
            ray.direction = payload.scatteredDirection;
            tmin = 0.0001; // adjust to avoid self-intersection (0.1mm)
        } else {
            // no hit - draw environment as last hit
            vec2 sampleUv = sphericalUvFromDirection(ray.direction);
            vec3 environmentRadiance = constants.environmentMultiplier * texture(environmentMap, sampleUv).rgb;
            payload.color += payload.attenuation * environmentRadiance;
            break;
        }
    }

    imageStore(pathTraceImage, ivec2(rt_LaunchID.xy), vec4(payload.color, 0.0));
}
