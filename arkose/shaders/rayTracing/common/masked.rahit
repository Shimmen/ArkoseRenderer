#version 460
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require

#include <rayTracing/common/common.glsl>
#include <common/material.glsl>
#include <shared/SceneData.h>

layout(location = 0) rayPayload RayPayloadMain payload;
hitAttribute vec3 attribs;

layout(set = 1, binding = 0, scalar) buffer readonly TriangleMeshes { RTTriangleMesh meshes[]; };
layout(set = 1, binding = 1, scalar) buffer readonly Indices        { uint indices[]; };
layout(set = 1, binding = 2, scalar) buffer readonly Vertices       { Vertex vertices[]; };

DeclareCommonBindingSet_Material(2)

void main()
{
    RTTriangleMesh mesh = meshes[rt_InstanceCustomIndex];
    ShaderMaterial material = material_getMaterial(mesh.materialIndex);

    ivec3 idx = ivec3(indices[mesh.firstIndex + 3 * gl_PrimitiveID + 0],
                      indices[mesh.firstIndex + 3 * gl_PrimitiveID + 1],
                      indices[mesh.firstIndex + 3 * gl_PrimitiveID + 2]);

    Vertex v0 = vertices[mesh.firstVertex + idx.x];
    Vertex v1 = vertices[mesh.firstVertex + idx.y];
    Vertex v2 = vertices[mesh.firstVertex + idx.z];

    const vec3 b = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

    vec2 uv = v0.texCoord.xy * b.x + v1.texCoord.xy * b.y + v2.texCoord.xy * b.z;
    float mask = texture(material_getTexture(material.baseColor), uv).a;

    if (mask < material.maskCutoff) {
        ignoreIntersection();
    }
}
