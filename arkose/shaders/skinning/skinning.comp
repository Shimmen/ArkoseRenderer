#version 460

#extension GL_EXT_scalar_block_layout : require

#include <common.glsl>
#include <common/namedUniforms.glsl>
#include <shared/SceneData.h>

layout(set = 0, binding = 0, scalar) buffer restrict PositionVertexBlock { vec3 positions[]; };
layout(set = 0, binding = 1, scalar) buffer restrict NonPositionVertexBlock { NonPositionVertex nonPositionVertexData[]; };
layout(set = 0, binding = 2, scalar) buffer restrict readonly SkinningVertexBlock { SkinningVertex skinningVertexData[]; };
layout(set = 0, binding = 3) buffer restrict readonly JointMatricesBlock { mat4 jointMatrices[]; };

NAMED_UNIFORMS(constants,
    uint firstSrcVertexIdx;
    uint firstDstVertexIdx;
    uint firstSkinningVertexIdx;
    uint vertexCount;
)

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint localVertexIdx = gl_GlobalInvocationID.x;
    if (localVertexIdx >= constants.vertexCount) {
        return;
    }

    uint jointVertexIdx = constants.firstSkinningVertexIdx + localVertexIdx;
    SkinningVertex skinningVertex = skinningVertexData[jointVertexIdx];
    mat4 animatedFromLocal = jointMatrices[skinningVertex.jointIndices.x] * skinningVertex.jointWeights.x +
                             jointMatrices[skinningVertex.jointIndices.y] * skinningVertex.jointWeights.y +
                             jointMatrices[skinningVertex.jointIndices.z] * skinningVertex.jointWeights.z +
                             jointMatrices[skinningVertex.jointIndices.w] * skinningVertex.jointWeights.w;

    uint srcVertexIdx = constants.firstSrcVertexIdx + localVertexIdx;
    uint dstVertexIdx = constants.firstDstVertexIdx + localVertexIdx;

    positions[dstVertexIdx] = vec3(animatedFromLocal * vec4(positions[srcVertexIdx], 1.0));

    // TODO: Upload instead of computing for every vertex!
    mat3 animatedFromTangent = transpose(inverse(mat3(animatedFromLocal)));

    NonPositionVertex vertex = nonPositionVertexData[srcVertexIdx];
    vertex.normal = animatedFromTangent * vertex.normal;
    vertex.tangent.xyz = animatedFromTangent * vertex.tangent.xyz;
    nonPositionVertexData[dstVertexIdx] = vertex;
}
