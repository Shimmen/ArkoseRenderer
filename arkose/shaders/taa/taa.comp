#version 460

#include <common.glsl>
#include <common/namedUniforms.glsl>
#include <common/sampling.glsl>

layout(set = 0, binding = 0, rgba8) uniform restrict writeonly image2D resultImage;
layout(set = 0, binding = 1)        uniform                  sampler2D currentColorTex;
layout(set = 0, binding = 2)        uniform                  sampler2D currentVelocityTex;
layout(set = 0, binding = 3)        uniform                  sampler2D historyColorTex;

NAMED_UNIFORMS(pushConstants,
    float hysteresis;
    bool useCatmullRom;
)

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = ivec2(textureSize(currentColorTex, 0).xy);

    if (any(greaterThanEqual(pixelCoord, imgSize)))
        return;

    vec3 current = texelFetch(currentColorTex, pixelCoord, 0).rgb;
    vec2 currentVelocity = texelFetch(currentVelocityTex, pixelCoord, 0).zw; // (xy is encoded normal)

    vec2 pixelSize = vec2(1.0) / vec2(imgSize);
    vec2 currentUV = (vec2(pixelCoord) + vec2(0.5)) * pixelSize;
    vec2 historyUV = currentUV - currentVelocity;

    vec3 history = (pushConstants.useCatmullRom)
        ? sampleTextureCatmullRom(historyColorTex, historyUV, vec2(imgSize)).rgb
        : textureLod(historyColorTex, historyUV, 0).rgb;

    vec3 neighborhoodMin = vec3(+9999999.0);
    vec3 neighborhoodMax = vec3(-9999999.0);
    for (int y = -1; y <= 1; ++y) {
        for (int x = -1; x <= 1; ++x) {
            ivec2 neighbourPixelCoord = clamp(pixelCoord + ivec2(x, y), ivec2(0, 0), imgSize - ivec2(1, 1));
            vec3 neighbourColor = texelFetch(currentColorTex, neighbourPixelCoord, 0).rgb;
            neighborhoodMin = min(neighbourColor, neighborhoodMin);
            neighborhoodMax = max(neighbourColor, neighborhoodMax);
        }
    }

    history = clamp(history, neighborhoodMin, neighborhoodMax);

    // TODO: Implement velocity rejection (see https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/)

    float hysteresis = saturate(pushConstants.hysteresis);
    vec3 antiAliased = mix(current, history, hysteresis);
    imageStore(resultImage, pixelCoord, vec4(antiAliased, 1.0));
}
