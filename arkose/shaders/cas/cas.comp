#version 460

#include <color/srgb.glsl>
#include <common/namedUniforms.glsl>

layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D sharpenedSceneColorImg;
layout(set = 0, binding = 1) uniform sampler2D sceneColorTex;

NAMED_UNIFORMS(constants,
    uvec2 targetSize;
    float sharpness;
)

////////////////////////////////////////////////////////////////////////////////
// CAS API

// NOTE: Bypassing "ffx_core.h" as the #ifdef includes wasn't understood by my
// include-tree detection code so it would complain about all the missing files
// that we don't even need with the defines we have setup.
#define FFX_GPU
#define FFX_GLSL
#include <cas/ffx_sdk/ffx_common_types.h>
#include <cas/ffx_sdk/ffx_core_glsl.h>
#include <cas/ffx_sdk/ffx_core_gpu_common.h>

FfxFloat32x3 casLoad(FFX_PARAMETER_IN FfxInt32x2 pixelCoord)
{
    return texelFetch(sceneColorTex, pixelCoord, 0).rgb;
}

// Transform input from the load into a linear color space between 0 and 1.
void casInput(FFX_PARAMETER_INOUT FfxFloat32 red, FFX_PARAMETER_INOUT FfxFloat32 green, FFX_PARAMETER_INOUT FfxFloat32 blue)
{
    // We're after tonemapping so we will be in sRGB non-linear space
    // TODO: Make variants for non sRGB output, e.g. PQ mapped output.
    red = sRGB_gammaDecodeScalar(red);
    green = sRGB_gammaDecodeScalar(green);
    blue = sRGB_gammaDecodeScalar(blue);
}

#include <cas/ffx_sdk/ffx_cas.h>

////////////////////////////////////////////////////////////////////////////////
// Main

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
    uvec2 pixelCoord = uvec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, constants.targetSize))) {
        return;
    }

    uvec4 const0, const1;
    ffxCasSetup(const0, const1,
    constants.sharpness,
    constants.targetSize.x, constants.targetSize.y,
    constants.targetSize.x, constants.targetSize.y);

    vec3 sharpenedColorLinear;
    casFilterNoScaling(sharpenedColorLinear.r, sharpenedColorLinear.g, sharpenedColorLinear.b, pixelCoord, const0, const1);

    // Undo the `casInput` mapping
    vec4 sharpenedColor = vec4(sRGB_gammaEncode(sharpenedColorLinear), 1.0);

    imageStore(sharpenedSceneColorImg, ivec2(pixelCoord), sharpenedColor);
}
