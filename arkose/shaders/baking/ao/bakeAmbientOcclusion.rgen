#version 460
#extension GL_EXT_scalar_block_layout : require

#ifndef BAKE_BENT_NORMALS
#error "Ensure `BAKE_BENT_NORMALS` is defined to 0 or 1"
#endif

#include <common.glsl>
#include <common/material.glsl>
#include <common/namedUniforms.glsl>
#include <common/random.glsl>
#include <common/rayTracing.glsl>

layout(set = 0, binding = 0) uniform AccelerationStructure topLevelAccelerationStructure;
layout(set = 0, binding = 1) uniform usampler2D triangleIdxTex;
layout(set = 0, binding = 2) uniform sampler2D barycentricsTex;
#if BAKE_BENT_NORMALS
layout(set = 0, binding = 3, rgba8) uniform image2D bentNormalImg;
#else
layout(set = 0, binding = 3, r8ui) uniform uimage2D ambientOcclusionImg;
#endif

DeclareCommonBindingSet_RTMesh(1)
DeclareCommonBindingSet_Material(2)

NAMED_UNIFORMS(constants,
    uint sampleCount;
    uint meshIndex;
)

layout(location = 0) rayPayload float payloadHitDistance;

void main()
{
    ivec2 targetPixel = ivec2(rt_LaunchID.xy);
    #if BAKE_BENT_NORMALS
    ivec2 targetResolution = ivec2(imageSize(bentNormalImg));
    #else
    ivec2 targetResolution = ivec2(imageSize(ambientOcclusionImg));
    #endif

    uint triangleIdxOrZero = texelFetch(triangleIdxTex, targetPixel, 0).r;
    if (triangleIdxOrZero == 0) {
        #if BAKE_BENT_NORMALS
        imageStore(bentNormalImg, targetPixel, vec4(0, 0, 0, 0));
        #else
        imageStore(ambientOcclusionImg, targetPixel, uvec4(0, 0, 0, 0));
        #endif
        return;
    }

    uint triangleIdx = triangleIdxOrZero - 1;
    uint meshIndex = constants.meshIndex;

    RTTriangleMesh mesh = rtmesh_getMesh(meshIndex);

    ivec3 idx = ivec3(rtmesh_getIndex(mesh.firstIndex + 3 * triangleIdx + 0),
                      rtmesh_getIndex(mesh.firstIndex + 3 * triangleIdx + 1),
                      rtmesh_getIndex(mesh.firstIndex + 3 * triangleIdx + 2));

    vec3 p0 = rtmesh_getPosition(mesh.firstVertex + idx.x);
    vec3 p1 = rtmesh_getPosition(mesh.firstVertex + idx.y);
    vec3 p2 = rtmesh_getPosition(mesh.firstVertex + idx.z);

    RTVertex v0 = rtmesh_getVertex(mesh.firstVertex + idx.x);
    RTVertex v1 = rtmesh_getVertex(mesh.firstVertex + idx.y);
    RTVertex v2 = rtmesh_getVertex(mesh.firstVertex + idx.z);

    vec3 b = texelFetch(barycentricsTex, targetPixel, 0).rgb;

    vec3 position = p0 * b.x + p1 * b.y + p2 * b.z;
    vec3 normal = normalize(v0.normal * b.x + v1.normal * b.y + v2.normal * b.z);

    const float tmin = 0.0005; // 0.5mm (appears to be too small for some meshes)
    const float tmax = 100.0; // TODO: adjust to mesh bounding box diagonal, perhaps?

    const uint rayFlags = RayFlags_None;
    const uint cullMask = 0xff;

    float ambientOcclusionAcc = 0.0;
    vec3 unoccludedDirectionAcc = vec3(0.0);

    seedRandom(targetPixel.x + (targetPixel.y * targetResolution.x));

    const uint numSamples = constants.sampleCount;
    for (uint sampleIdx = 0; sampleIdx < numSamples; sampleIdx++) {

        // If sampling using these cosine-weighted samples we can average these samples directly to compute the integral.
        // Use rejection-sampling to generate a non-zero cosine-distributed direction
        vec3 sampleDirection;
        do {
            sampleDirection = normal + randomPointOnSphere();
        } while (lengthSquared(sampleDirection) <= 1e-4);
        sampleDirection = normalize(sampleDirection);

        traceRay(topLevelAccelerationStructure, rayFlags, cullMask, 0, 0, 0, position, tmin, sampleDirection, tmax, 0);

        if (payloadHitDistance <= tmax) {
            // TODO: Consider doing some kind of distance attenuation for distant hits
            ambientOcclusionAcc += 1.0;
        } else {
            unoccludedDirectionAcc += sampleDirection;
        }
    }

#if BAKE_BENT_NORMALS
    vec3 bentNormal = unoccludedDirectionAcc / float(numSamples); // this is intentionally *not* normalized
    float bentCone = PI / 2.0; // TODO: Calculate the cone!

    vec4 encodedData = vec4(bentNormal * vec3(0.5) + vec3(0.5), bentCone / (PI / 2.0));
    imageStore(bentNormalImg, targetPixel, encodedData);
#else
    float ambientOcclusion = ambientOcclusionAcc / float(numSamples);

    uint ambientOcclusionEncoded = uint(round(saturate(1.0 - ambientOcclusion) * 255.0));
    imageStore(ambientOcclusionImg, targetPixel, uvec4(ambientOcclusionEncoded, 0, 0, 0));
#endif
}
