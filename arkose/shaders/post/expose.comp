#version 460

#include <common/camera.glsl>
#include <common/namedUniforms.glsl>
#include <shared/CameraState.h>

layout(set = 0, binding = 0) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 1) uniform sampler2D avgLogLuminanceTex;

layout(set = 1, binding = 0) buffer PassDataBlock {
    float currentExposure;
    float currentAvgLuminance;
};

layout(set = 2, binding = 0) buffer PrevPassDataBlock {
    float lastExposure;
    float lastAvgLuminance;
};

NAMED_UNIFORMS(pushConstants,
    float deltaTime;
    float adaptionRate;
)

layout(local_size_x = 1, local_size_y = 1) in;
void main()
{
    // TODO: Right now all this could pretty much be done on the CPU just as easily.. but we probably
    // want to move to a proper histogram eventually and then it will be nice to have it on the GPU.

    const int bottomMipLevel = 9; // for 512x512 image     todo!!!
    float avgLuminance = exp(texelFetch(avgLogLuminanceTex, ivec2(0, 0), bottomMipLevel).r);

    AutoExposureResult result = valueForAutomaticExposure(avgLuminance, lastAvgLuminance, camera.exposureCompensation, pushConstants.adaptionRate, pushConstants.deltaTime);

    currentExposure = result.exposure;
    currentAvgLuminance = result.nextLuminanceHistory;
}
