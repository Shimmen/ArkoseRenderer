#version 460

#extension GL_KHR_shader_subgroup_ballot : require

#include <common.glsl>
#include <common/camera.glsl>
#include <common/namedUniforms.glsl>
#include <shared/SceneData.h>

layout(local_size_x = GROUP_SIZE) in;

layout(set = 0, binding = 0) uniform CameraStateBlock { CameraState camera; };

layout(set = 1, binding = 0) buffer restrict InstanceBlock { ShaderDrawable drawables[]; };
layout(set = 1, binding = 1) buffer restrict IndirectCmdBlock { uvec4 indirectData[]; };

NAMED_UNIFORMS(constants,
    uint drawableCount;
    uint drawKeyMask;
    bool frustumCull;
)

void main()
{
    uint drawableIdx = gl_GlobalInvocationID.x;
    if (drawableIdx >= constants.drawableCount) {
        return;
    }

    ShaderDrawable drawable = drawables[drawableIdx];
    if (drawable.meshletCount == 0) {
        return;
    }

    bool shouldDraw = (drawable.drawKey & constants.drawKeyMask) == drawable.drawKey;

    // TODO: Fix this so it works with the custom frustum, not just the default/global camera one.
    //if (constants.frustumCull) {
    //    vec4 transformedSphere = transformSphere(drawable.localBoundingSphere, drawable.worldFromLocal);
    //    shouldDraw = shouldDraw && isSphereInCameraFrustum(transformedSphere, camera);
    //}

    // TODO: if (drawable.meshletCount % GROUP_SIZE) != 0, see if we can put the next instance in the same indirect cmd.
    // If we make the drawable lookup more complex, e.g. make it possible to store up to x instances per cmd,
    // then we could do some smart compactation like this. Otherwise, if we e.g. have 100 instances, each with
    // just one meshlet, we will waste GROUP_SIZE-1 meshlets per task shader invocation, which is bad..

    uvec4 ballot = subgroupBallot(shouldDraw);
    uint numLocalInstances = subgroupBallotBitCount(ballot);
    uint localInstanceOffset = subgroupBallotExclusiveBitCount(ballot);

    uint lookupIdx;
    if (subgroupElect()) {
        // indirectData[0]: used for the `count` part for `vkCmdDrawMeshTasksIndirectCountEXT`
        lookupIdx = atomicAdd(indirectData[0].x, numLocalInstances);
    }
    lookupIdx = subgroupBroadcastFirst(lookupIdx) + localInstanceOffset;

    if (shouldDraw) {
        // indirectData[1..]: (xyz) used for the indirect cmd, (w) used for the drawableIdx lookup per indirect dispatch
        indirectData[lookupIdx + 1] = uvec4((drawable.meshletCount + GROUP_SIZE - 1) / GROUP_SIZE, 1, 1, drawableIdx);
    }
}
