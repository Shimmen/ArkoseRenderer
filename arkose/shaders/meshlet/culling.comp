#version 460

#include <common.glsl>
#include <common/namedUniforms.glsl>
#include <gpgpu/brokerQueue.glsl>
#include <gpgpu/rangeProcessor.glsl>
#include <shared/IndirectData.h>
#include <shared/SceneData.h>

#ifndef MESHLET_QUEUE_SIZE
#error "MESHLET_QUEUE_SIZE not defined, must be a power-of-two"
#endif

#ifndef TRIANGLE_QUEUE_SIZE
#error "TRIANGLE_QUEUE_SIZE not defined, must be a power-of-two"
#endif

#ifndef WORK_GROUP_SIZE
#error "WORK_GROUP_SIZE not defined, must be some valid work group size, e.g. 64"
#endif

#ifndef NUM_WORK_GROUPS
#error "NUM_WORK_GROUPS not defined, must match the number of work groups specified in the dispatch call"
#endif

#define MAX_THREADS (WORK_GROUP_SIZE * NUM_WORK_GROUPS)

layout(set = 0, binding = 0) buffer restrict InstanceBlock { ShaderDrawable instances[]; };
layout(set = 0, binding = 1) buffer restrict MeshletDataBlock { ShaderMeshlet meshlets[]; };
layout(set = 0, binding = 2) buffer restrict MeshletIndexBlock { uint meshletIndices[]; };

// NOTE: uvec4 for ElementType is required for range processor
layout(set = 0, binding = 3) MAKE_BROKER_QUEUE(meshletQueue, uvec4, MESHLET_QUEUE_SIZE, MAX_THREADS)
layout(set = 0, binding = 4) MAKE_BROKER_QUEUE(triangleQueue, uvec4, TRIANGLE_QUEUE_SIZE, MAX_THREADS)

layout(set = 0, binding = 5) buffer restrict coherent ResultIndexDataBlock { uvec2 triangleIndices[]; };
layout(set = 0, binding = 6) buffer coherent restrict ResultDrawCmdBlock { IndexedDrawCmd drawCmd; }; // NOTE: We can keep track of triangle indices from the draw command
layout(set = 0, binding = 7) buffer coherent restrict MiscDataBlock {
    uint nextInstanceIdx;
    uint meshletQueueFailureCounter;
    uint triangleQueueFailureCounter;
    bool outOfTrianglesFailure;
};

NAMED_UNIFORMS(constants,
    uint instanceCount;
    uint maxTriangleCount;
)

// NOTE: We will attempt to never fill any buffer more than this, even though there is more capacity,
//       because we have to dequeue and enque from two separate queues at the same time, and we can't
//       atomically ensure both won't fulfill our invariants (not empty and not full respectively),
//       but by staying far below the treshold we should be fairly certain no buffer is ever full.
#define MESHLET_QUEUE_FILL_THRESHOLD (MESHLET_QUEUE_SIZE >> 1)
#define TRIANGLE_QUEUE_FILL_THRESHOLD (TRIANGLE_QUEUE_SIZE >> 1)

bool canAttemptToEnqueueMeshletRanges()
{
    return meshletQueueApproximateCount() <= MESHLET_QUEUE_FILL_THRESHOLD;
}

bool canAttemptToEnqueueTriangleRanges()
{
    return triangleQueueApproximateCount() <= TRIANGLE_QUEUE_FILL_THRESHOLD;
}

bool canAttemptToEnqueueTriangleIndices()
{
    return (drawCmd.indexCount / 3) < constants.maxTriangleCount;
}

MAKE_RANGE_PROCESSOR(Meshlet, meshletQueue, canAttemptToEnqueueMeshletRanges, canAttemptToEnqueueTriangleRanges, meshletQueueFailureCounter)
MAKE_RANGE_PROCESSOR(Triangle, triangleQueue, canAttemptToEnqueueTriangleRanges, canAttemptToEnqueueTriangleIndices, triangleQueueFailureCounter)

bool hasInstancesToCull()
{
    return nextInstanceIdx < constants.instanceCount;
}

void cullTriangles(uint triangleIdx, uint instanceIdx);
void cullMeshlets(uint meshletIdx, uint instanceIdx);
void cullInstances();

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
    // TODO: Get rid of max-iterations counter once we can do the whole pipe
    int iters = 500;
    while (true && (iters-- > 0)) {

        uint index;
        uint instanceIdx;

        // TODO: Complete this! Currently there's an issue when we try to dequeue meshlets from the queue.

        /* if (consumeTriangleRangeForProcessing(index, instanceIdx)) {
            // Consume a triangle range, produce triangle indices for drawing and possibly another triangle sub-range
            cullTriangles(index, instanceIdx);
        }

        else if (consumeMeshletRangeForProcessing(index, instanceIdx)) {
            // Consume a meshlet range, produce a triangle range and possibly another meshlet sub-range
            //cullMeshlets(index, instanceIdx);
        }

        else */ if (canAttemptToEnqueueMeshletRanges()) {
            // Consume n instances, produce up to n meshlet ranges
            cullInstances();
        }

        // TODO: We might need something less approximate here?!
        if (!hasInstancesToCull() && meshletQueueApproximateCount() == 0 && triangleQueueApproximateCount() == 0) {
            // As long as we have more instances, keep going. If no more instances (and no pending work), culling is done!
            break;
        }

        if (!canAttemptToEnqueueTriangleIndices()) {
            // No more space to push triangles, this is an error
            // TODO: Set error flag!
            break;
        }

    }
}

void cullTriangles(uint triangleIdx, uint instanceIdx)
{
    // NOTE: At this point we've consumed a triangle range, and possibly produced another triangle sub-range.
    //       We're passed the index of the triangle we are to cull and we need to perform all relevant cull
    //       tests, and finally append the triangle indices to the index buffer and increment relevant counters.

    uint idx0 = 3 * triangleIdx + 0;
    uint idx1 = 3 * triangleIdx + 1;
    uint idx2 = 3 * triangleIdx + 2;

    uint vIdx0 = meshletIndices[idx0];
    uint vIdx1 = meshletIndices[idx1];
    uint vIdx2 = meshletIndices[idx2];

    // TODO: Get triangle data for culling!
    //vec2 v0 = positions[vIdx0];
    //vec2 v1 = positions[vIdx1];
    //vec2 v2 = positions[vIdx2];

    // TODO: Actually do culling tests on the triangle!
    bool includeTriangle = true;

    uvec4 triangleCullBallot = subgroupBallot(includeTriangle);
    uint trianglesToAppend = subgroupBallotBitCount(triangleCullBallot);
    uint triangleOffset = subgroupBallotExclusiveBitCount(triangleCullBallot);

    uint resultTriangleIdx;
    if (subgroupElect()) {
        resultTriangleIdx = atomicAdd(drawCmd.indexCount, 3 * trianglesToAppend) / 3;
    }
    resultTriangleIdx = subgroupBroadcastFirst(resultTriangleIdx) + triangleOffset;

    if (resultTriangleIdx < constants.maxTriangleCount) {
        triangleIndices[3 * resultTriangleIdx + 0] = uvec2(idx0, instanceIdx);
        triangleIndices[3 * resultTriangleIdx + 1] = uvec2(idx1, instanceIdx);
        triangleIndices[3 * resultTriangleIdx + 2] = uvec2(idx2, instanceIdx);
    } else {
        outOfTrianglesFailure = true;
    }
}

void cullMeshlets(uint meshletIdx, uint instanceIdx)
{
    // NOTE: At this point we've consumed a meshlet range, and possibly produced another meshlet sub-range.
    //       We're passed the index of the meshlet we are to cull and we need to perform all relevant cull
    //       tests, and finally append the triangle ranges to the triangle queue.

    ShaderMeshlet meshlet = meshlets[meshletIdx];

    // TODO: Actually do culling tests on the meshlet!
    bool includeMeshlet = true;

    uvec4 meshletCullBallot = subgroupBallot(includeMeshlet);
    uint meshletsToAppend = subgroupBallotBitCount(meshletCullBallot);
    uint meshletOffset = subgroupBallotExclusiveBitCount(meshletCullBallot);

    uint firstTriangle = meshlet.firstIndex / 3;
    uvec4 triangleRange = uvec4(firstTriangle, firstTriangle + meshlet.triangleCount, instanceIdx, 0u);

    if (!triangleQueueEnqueue(triangleRange)) {
        atomicAdd(triangleQueueFailureCounter, 1); // TODO: Add own counter?
    }
}

void cullInstances()
{
    // TODO: Is this needed? We're not killing off any lanes before this anyway so why not use WORK_GROUP_SIZE?
    // TODO: Although, we don't know the real lane width and it might not match WORK_GROUP_SIZE (in fact, it wont!)
    // TODO: BUT we could maybe use gl_SubgroupSize and gl_SubgroupInvocationID instead of calling into these functions?
    uvec4 activeLaneBallot = subgroupBallot(true);
    uint numLanes = subgroupBallotBitCount(activeLaneBallot);
    uint laneIdx = subgroupBallotExclusiveBitCount(activeLaneBallot);

    uint instanceIdx;
    if (subgroupElect()) {
        instanceIdx = atomicAdd(nextInstanceIdx, numLanes);
    }

    instanceIdx = subgroupBroadcastFirst(instanceIdx) + laneIdx;
    if (instanceIdx < constants.instanceCount) {

        ShaderDrawable instance = instances[instanceIdx];

        // TODO: Actually do culling tests on the instance!

        uvec4 meshletRange = uvec4(instance.firstMeshlet, instance.firstMeshlet + instance.meshletCount, instanceIdx, 0u);
        if (!meshletQueueEnqueue(meshletRange)) {
            atomicAdd(meshletQueueFailureCounter, 1); // TODO: Add own counter?
        }
    }
}
