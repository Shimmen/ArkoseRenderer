#version 460

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_scalar_block_layout : require

#include <common.glsl>
#include <common/camera.glsl>
#include <common/namedUniforms.glsl>
#include <meshlet/meshletCommon.glsl>
#include <shared/SceneData.h>
#include <shared/ShaderBlendMode.h>

layout(set = 0, binding = 0) uniform CameraStateBlock { CameraState camera; };

layout(set = 1, binding = 0) buffer restrict readonly IndirectDataBlock { uvec4 indirectData[]; };
layout(set = 1, binding = 1) buffer restrict readonly InstanceBlock { ShaderDrawable instances[]; };
layout(set = 1, binding = 2) buffer restrict readonly MeshletBlock { ShaderMeshlet meshlets[]; };

layout(set = 2, binding = 0, scalar) buffer restrict readonly IndicesBlock { uint meshletIndices[]; };
layout(set = 2, binding = 1, scalar) buffer restrict readonly PositionsBlock { vec3 meshletPositions[]; };
layout(set = 2, binding = 2, scalar) buffer restrict readonly NonPositionsBlock { NonPositionVertex meshletVertices[]; };

NAMED_UNIFORMS_STRUCT(MeshletConstants, constants)

taskPayloadSharedEXT MeshShaderInterpolants fromTaskShader;

layout(location = 0) perprimitiveEXT flat out uint vDrawableIdx[];
layout(location = 1) perprimitiveEXT flat out uint vMeshletIdx[];
layout(location = 2) perprimitiveEXT flat out meshlet_rel_idx_t vPrimitiveIdx[];
#if VISBUF_BLEND_MODE == BLEND_MODE_MASKED
layout(location = 3) perprimitiveEXT flat out uint vMaterialIdx[];
layout(location = 4) out vec2 vTexCoord[];
#endif

layout(triangles) out;
layout(max_vertices = MAX_VERTEX_COUNT) out;
layout(max_primitives = MAX_PRIMITIVE_COUNT) out;
layout(local_size_x = GROUP_SIZE) in;

void main()
{
    uint drawableIdx = fromTaskShader.drawableIdx;
    ShaderDrawable drawable = instances[drawableIdx];

    uint meshletIdx = fromTaskShader.meshletBaseIndex + fromTaskShader.meshletRelativeIndices[gl_WorkGroupID.x];
    ShaderMeshlet meshlet = meshlets[meshletIdx];

    SetMeshOutputsEXT(meshlet.vertexCount, meshlet.triangleCount);

    const uint vertexIterations = (MAX_VERTEX_COUNT + GROUP_SIZE - 1) / GROUP_SIZE;
    const uint primitiveIterations = (MAX_PRIMITIVE_COUNT + GROUP_SIZE - 1) / GROUP_SIZE;

    for (uint it = 0; it < vertexIterations; ++it) {
        uint localVertexIdx = gl_LocalInvocationIndex + it * GROUP_SIZE;
        localVertexIdx = min(localVertexIdx, meshlet.vertexCount - 1);

        uint vertexIdx = meshlet.firstVertex + localVertexIdx;
        vec3 localPosition = meshletPositions[vertexIdx];

        vec4 worldSpacePos = drawable.worldFromLocal * vec4(localPosition, 1.0);
        gl_MeshVerticesEXT[localVertexIdx].gl_Position = constants.projectionFromWorld * worldSpacePos;

#if VISBUF_BLEND_MODE == BLEND_MODE_MASKED
        NonPositionVertex vertexData = meshletVertices[vertexIdx];
        vTexCoord[localVertexIdx] = vertexData.texcoord0;
#endif
    }

    for (uint it = 0; it < primitiveIterations; ++it) {
        uint primitiveIdx = gl_LocalInvocationIndex + it * GROUP_SIZE;
        primitiveIdx = min(primitiveIdx, meshlet.triangleCount - 1);

        uvec3 idx = uvec3(meshletIndices[meshlet.firstIndex + 3 * primitiveIdx + 0],
                          meshletIndices[meshlet.firstIndex + 3 * primitiveIdx + 1],
                          meshletIndices[meshlet.firstIndex + 3 * primitiveIdx + 2]);

        // Subtract index of firstVertex, as we index directly into the gl_MeshVerticesEXT array but we store indices into the global meshlet vertex array
        // TODO: Consider if this is the way we really want to store them.. We could probably just as easily flip it so we add firstVertex in other cases instead.
        idx -= uvec3(meshlet.firstVertex);

        gl_PrimitiveTriangleIndicesEXT[primitiveIdx] = idx;

        vDrawableIdx[primitiveIdx] = drawableIdx;
        vMeshletIdx[primitiveIdx] = meshletIdx;
        vPrimitiveIdx[primitiveIdx] = meshlet_rel_idx_t(primitiveIdx);

#if VISBUF_BLEND_MODE == BLEND_MODE_MASKED
        vMaterialIdx[primitiveIdx] = drawable.materialIndex;
#endif
    }
}
