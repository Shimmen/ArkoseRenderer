#version 460

#include <common/brdf.glsl>
#include <common/namedUniforms.glsl>
#include <common/spherical.glsl>
#include <ddgi/common.glsl>
#include <ddgi/probeSampling.glsl>
#include <rayTracing/common/common.glsl>
#include <shared/CameraState.h>

layout(set = 0, binding = 0) uniform AccelerationStructure topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2) uniform sampler2D environmentMap;
layout(set = 0, binding = 3, rgba16f) uniform image2D surfelImage;

layout(set = 4, binding = 0) uniform DDGIGridDataBlock { DDGIProbeGridData probeGridData; };
layout(set = 4, binding = 1) buffer ProbeOffsetBlock { vec3 probeOffsets[]; };
layout(set = 4, binding = 2) uniform sampler2D ddgiIrradianceAtlas;
layout(set = 4, binding = 3) uniform sampler2D ddgiVisibilityAtlas;

NAMED_UNIFORMS_STRUCT(RayTracingPushConstants, constants)

layout(location = 0) rayPayload RayPayloadMain payload;

struct HitResult {
    bool didHit;
    vec3 color;
    float dist;
    vec3 baseColor;
    vec3 normal;
    float metallic;
    float roughness;
};

HitResult tracePrimaryRay(vec3 origin, vec3 direction)
{
    float tmin = camera.zNear;
    float tmax = camera.zFar;

    int numHits = 0;
    vec3 color = vec3(0.0);

    // Opaque
    {
        // NOTE: No backface culling, we need backface info
        uint rayFlags = RayFlags_Opaque;
        uint cullMask = RT_HIT_MASK_OPAQUE;

        traceRay(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);
        if (payload.hitT <= tmax) {
            tmax = payload.hitT;
            color = payload.color;
            numHits += 1;
        }
    }

    // Masked (todo: also include alpha-translucents here, but treat them like masked)
    {
        uint rayFlags = RayFlags_NoOpaque;
        uint cullMask = RT_HIT_MASK_MASKED;

        traceRay(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);
        if (payload.hitT <= tmax) {
            tmax = payload.hitT;
            color = payload.color;
            numHits += 1;
        }
    }

    // Draw environment if miss
    if (numHits == 0) {
        // TODO: Consider if we really want to use the very large value camera.zFar here or if we should use some smaller "large" value for sky hits.
        // For the purpose of the Chebychev-test we do want to record a large variance of course, but we need some numerical stability still.. 
        // We should never need to see anything beyond the grid cell distance diagonal, so maybe just set it to that (plus epsilon)? Would that work?
        tmax = camera.zFar; // if miss, use camera far distance as hit distance

        vec2 sampleUv = sphericalUvFromDirection(direction);
        color = constants.environmentMultiplier * texture(environmentMap, sampleUv).rgb;
    }

    HitResult result;
    result.color = color;
    result.dist = tmax;
    result.didHit = numHits > 0;
    if (numHits > 0) {
        result.baseColor = payload.baseColor;
        result.normal = payload.normal;
        result.metallic = payload.metallic;
        result.roughness = payload.roughness;
    }
    return result;
}

vec3 evaluateIndirectLightFromPreviousFrame(vec3 P, vec3 V, vec3 N, vec3 baseColor, float metallic)
{
    // For diffuse, simply pretend half vector is normal
    vec3 H = N;

    vec3 F0 = mix(vec3(DIELECTRIC_REFLECTANCE), baseColor, metallic);
    vec3 F = F_Schlick(max(0.0, dot(V, H)), F0);

    vec3 irradiance = sampleDynamicDiffuseGlobalIllumination(P, N, V, probeGridData, ddgiIrradianceAtlas, ddgiVisibilityAtlas);
    vec3 indirectDiffuse = vec3(1.0 - metallic) * vec3(1.0 - F) * irradiance;

    return indirectDiffuse;
}

void main()
{
    ivec2 targetPixel = ivec2(rt_LaunchID.xy);

    // TODO: We're "supposed" to report *negative* ray distance when we hit a backface, so that we can optimize probe offsets! We're not doing that yet though.
    //    see gl_HitKindFrontFacingTriangleNV & gl_HitKindBackFacingTriangleNV

    uint probeIdx = rt_LaunchID.x;
    uint sampleIdx = rt_LaunchID.y;
    uint sampleCount = uint(round(constants.parameter2)); // i.e. raysPerProbe;

    vec3 probePosition = calculateProbePosition(probeGridData, probeIdx);
    probePosition += probeOffsets[probeIdx];

    vec3 sampleDirection = calculateRotatedSphericalFibonacciSample(probeIdx, sampleIdx, sampleCount, uint(round(constants.parameter1)) /* i.e. frameIdx*/);
    HitResult hit = tracePrimaryRay(probePosition, sampleDirection);

    vec3 color = hit.color;

    if (hit.didHit) {
        vec3 hitPos = probePosition + hit.dist * sampleDirection;
        color += hit.baseColor * evaluateIndirectLightFromPreviousFrame(hitPos, -sampleDirection, hit.normal, hit.baseColor, hit.metallic);

        if (hit.dist < 0.0) {
            // Scaling Probe-Based Real-Time Dynamic Global Illumination for Production:
            // "probe-update rays that hit backfaces record a value of 0 for irradiance and shorten their depth values by 80%"
            color = vec3(0.0);
            hit.dist *= 0.8;
        }
    }

    // NOTE: hit.dist is <0 if it's a backface hit!
    imageStore(surfelImage, targetPixel, vec4(color, hit.dist));
}
