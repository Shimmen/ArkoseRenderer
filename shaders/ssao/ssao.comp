#version 460

#include <common/camera.glsl>
#include <common/gBuffer.glsl>
#include <common/namedUniforms.glsl>
#include <common/random.glsl>
#include <shared/SSAOData.h>

layout(set = 0, binding = 0, r16f) uniform writeonly image2D ambientOcclusion;
layout(set = 0, binding = 1) uniform sampler2D sceneOpaqueDepth;
layout(set = 0, binding = 2) uniform sampler2D sceneOpaqueNormals;
layout(set = 0, binding = 3) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 4) uniform KernelDataBlock { vec4 kernelSamples[SSAO_KERNEL_SAMPLE_MAX_COUNT]; };

NAMED_UNIFORMS(pushConstants,
    uvec2 targetSize;
    float kernelRadius;
    float kernelExponent;
    int kernelSampleCount;
)



layout(local_size_x = 32, local_size_y = 32) in;
void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, pushConstants.targetSize)))
        return;

    float primaryHitDepth = texelFetch(sceneOpaqueDepth, pixelCoord, 0).r;
    if (primaryHitDepth > 0.9999) {
        // Hmm, or maybe just rely on the stencil to not read these?
        imageStore(ambientOcclusion, pixelCoord, vec4(1.0, 0.0, 0.0, 0.0));
        return;
    }

    // Set up tbn matrix for orienting the kernel (TODO: sample blue noise instead!)
    seedRandom(gl_GlobalInvocationID.x + pushConstants.targetSize.x * gl_GlobalInvocationID.y);
    vec3 randomXY = vec3(2.0 * vec2(randomFloat(), randomFloat()) - 1.0, 0.0);
    vec3 normal = decodeNormal(texelFetch(sceneOpaqueNormals, pixelCoord, 0).xy);
    vec3 tangent = normalize(randomXY - normal * dot(randomXY, normal));
    vec3 bitangent = cross(tangent, normal);
    mat3 tbn = mat3(tangent, bitangent, normal);

    vec3 origin = unprojectPixelCoordAndDepthToViewSpace(pixelCoord, primaryHitDepth, camera);
    origin += 0.025 * normal;

    float weight = 0.0;
    float occlusion = 0.0;
    for (uint i = 0; i < pushConstants.kernelSampleCount; ++i) {

        // Calculate sample view space position
        vec3 samplePoint = origin + (tbn * (kernelSamples[i].xyz * pushConstants.kernelRadius));

        // Get reference depth for sample
        ivec2 projectedPixel = projectViewSpaceToPixel(samplePoint, ivec2(pushConstants.targetSize), camera); 
        float referenceDepth = unprojectPixelCoordAndDepthToViewSpace(projectedPixel, texelFetch(sceneOpaqueDepth, projectedPixel, 0).x, camera).z;

        float sampleWeight = (projectedPixel == clamp(projectedPixel, ivec2(0, 0), ivec2(pushConstants.targetSize) - ivec2(1, 0))) ? 1.0 : 0.0;

        float rangeTest = abs(origin.z - referenceDepth) <= pushConstants.kernelRadius ? 1.0 : 0.0;
        occlusion += (samplePoint.z < referenceDepth ? 1.0 : 0.0) * rangeTest * sampleWeight;
        
        weight += sampleWeight;
    }

    occlusion /= (weight + 1e-3);
    occlusion = 1.0 - pow(1.0 - occlusion, pushConstants.kernelExponent);

    float aoValue = 1.0 - occlusion;
    imageStore(ambientOcclusion, pixelCoord, vec4(aoValue, 0.0, 0.0, 0.0));
}
