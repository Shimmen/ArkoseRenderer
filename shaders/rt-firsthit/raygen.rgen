#version 460
#extension GL_NV_ray_tracing : require

#include <shared/CameraState.h>
#include <shared/RTData.h>

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2, rgba16f) uniform image2D u_image;

layout(location = 0) rayPayloadNV vec3 hitValue;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = camera.worldFromView * vec4(0, 0, 0, 1);
	vec4 target = camera.viewFromProjection * vec4(d.x, d.y, 1.0, 1.0);
	vec4 direction = camera.worldFromView * vec4(normalize(target.xyz / target.w), 0.0);

	uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsCullBackFacingTrianglesNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	imageStore(u_image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 0.0));
}
