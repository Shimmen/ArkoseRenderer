#version 460

#include <common.glsl>
#include <common/brdf.glsl>
#include <common/gBuffer.glsl>
#include <common/namedUniforms.glsl>
#include <common/spherical.glsl>
#include <rayTracing/common/common.glsl>
#include <shared/CameraState.h>

layout(set = 0, binding = 0) uniform AccelerationStructure topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2, rgba16f) uniform writeonly image2D resultImage;
layout(set = 0, binding = 3) uniform sampler2D sceneMaterialTex;
layout(set = 0, binding = 4) uniform sampler2D sceneNormalTex;
layout(set = 0, binding = 5) uniform sampler2D sceneDepthTex;
layout(set = 0, binding = 6) uniform sampler2D environmentTex;

NAMED_UNIFORMS_STRUCT(RayTracingPushConstants, constants);
// parameter1 => mirrorRoughnessThreshold;
// parameter2 => fullyDiffuseRoughnessThreshold;

layout(location = 0) rayPayload RayPayloadMain payload;

void main()
{
	const ivec2 pixelCoord = ivec2(rt_LaunchID.xy);
	const vec2 pixelCenter = vec2(pixelCoord) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(rt_LaunchSize.xy);

	float nonLinearDepth = texelFetch(sceneDepthTex, pixelCoord, 0).r;
	if (nonLinearDepth >= 1.0 - 1e-6) {
		imageStore(resultImage, pixelCoord, vec4(0.0));
		return;
	}

	vec3 viewSpaceNormal = decodeNormal(texelFetch(sceneNormalTex, pixelCoord, 0).rg);
	vec3 N = mat3(camera.worldFromView) * viewSpaceNormal;

	vec4 materialProps = texelFetch(sceneMaterialTex, pixelCoord, 0).rgba;
	float roughness = materialProps.r;
	float metallic = materialProps.g;

	vec4 cameraOrigin = camera.worldFromView * vec4(0, 0, 0, 1);
	vec4 cameraTarget = camera.worldFromView * camera.viewFromProjection * vec4(inUV * 2.0 - 1.0, nonLinearDepth, 1.0);
	cameraTarget.xyz /= cameraTarget.w;

	vec3 rayOrigin = cameraTarget.xyz;
	vec3 viewRay = normalize(cameraTarget.xyz - cameraOrigin.xyz);

	vec3 rayDirection;
	if (roughness <= constants.parameter1 /*i.e. mirrorRoughnessThreshold*/) {
		// Perfect mirror reflection
		rayDirection = reflect(viewRay, N);
	} else if (roughness >= constants.parameter2 /*i.e. fullyDiffuseRoughnessThreshold*/) {
		// TODO: Don't trace a ray, just sample the diffuse GI and weight accordinly
		imageStore(resultImage, pixelCoord, vec4(1, 0, 1, 0));
		return;
	} else {
		// TODO: Support non-mirror reflections (importance sample BRDF!)
		imageStore(resultImage, pixelCoord, vec4(0, 0, 0, 0));
		return;
	}

	float tmin = camera.zNear;
	float tmax = camera.zFar;

	int numHits = 0;
	vec3 reflectionColor = vec3(0.0);

	// Opaque
	{
		uint rayFlags = RayFlags_Opaque | RayFlags_CullBackFacingTriangles;
		uint cullMask = RT_HIT_MASK_OPAQUE;

		traceRay(topLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, rayDirection, tmax, 0);
		if (payload.hitT != HIT_T_MISS) {
			tmax = payload.hitT;
			reflectionColor = payload.color;
			numHits += 1;
		}
	}

	// Draw environment if miss
	if (numHits == 0) {
		vec2 sampleUv = sphericalUvFromDirection(rayDirection);
		reflectionColor = constants.environmentMultiplier * texture(environmentTex, sampleUv).rgb;
	}

	imageStore(resultImage, ivec2(rt_LaunchID.xy), vec4(reflectionColor, 0.0));
}
