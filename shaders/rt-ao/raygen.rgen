#version 460
#extension GL_NV_ray_tracing : require

#include <common.glsl>
#include <common/random.glsl>
#include <shared/CameraState.h>
#include <shared/RTData.h>

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2, r16f) uniform image2D aoImage;
layout(set = 0, binding = 3) uniform sampler2D gBufferNormal;
layout(set = 0, binding = 4) uniform sampler2D gBufferDepth;

layout(push_constant) uniform PushConstants {
	float radius;
	uint numSamples;
	uint frameIndex;
	uint hitMask;
	float darkening;
};

layout(location = 0) rayPayloadNV float hitT;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);

	float nonLinearDepth = texture(gBufferDepth, inUV).r;
	if (nonLinearDepth >= 1.0 - 1e-6) {
		float currentValue = imageLoad(aoImage, ivec2(gl_LaunchIDNV.xy)).r;
		imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(currentValue + 1.0));
		return;
	}

	vec3 viewSpaceNormal = normalize(texture(gBufferNormal, inUV).rgb);
	vec3 N = mat3(camera.worldFromView) * viewSpaceNormal;

	vec4 cameraOrigin = camera.worldFromView * vec4(0, 0, 0, 1);
	vec4 cameraTarget = camera.worldFromView * camera.viewFromProjection * vec4(inUV * 2.0 - 1.0, nonLinearDepth, 1.0);
	vec3 hitPoint = cameraTarget.xyz / cameraTarget.w;

	uint seed = (gl_LaunchIDNV.x + gl_LaunchSizeNV.x * gl_LaunchIDNV.y) + frameIndex * (gl_LaunchSizeNV.x * gl_LaunchSizeNV.y);
	seedRandom(seed);

	float occlusion = 0.0;
	for (uint i = 0; i < numSamples; ++i) {

		vec3 aoDirection = randomPointOnSphere();
		aoDirection *= sign(dot(aoDirection, N));

		uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsCullBackFacingTrianglesNV | gl_RayFlagsTerminateOnFirstHitNV;
		traceNV(topLevelAS, rayFlags, hitMask, 0, 0, 0, hitPoint, 0.001, aoDirection, radius, 0);

		if (hitT > 0.0) {
			float LdotN = dot(aoDirection, N);
			occlusion += (1.0 - (hitT / radius)) * LdotN;
		}
	}

	float aoValue = 1.0 - (occlusion / float(numSamples));
	aoValue = pow(aoValue, darkening);

	float currentValue = imageLoad(aoImage, ivec2(gl_LaunchIDNV.xy)).r;
	imageStore(aoImage, ivec2(gl_LaunchIDNV.xy), vec4(currentValue + aoValue));
}
