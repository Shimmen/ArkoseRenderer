#version 460

#include <common/camera.glsl>
#include <common/namedUniforms.glsl>
#include <common/shadow.glsl>

layout(set = 0, binding = 0, r8) restrict uniform image2D projectedShadowImg;
layout(set = 0, binding = 1)              uniform sampler2D shadowMapTex;
layout(set = 0, binding = 2)              uniform sampler2D sceneDepthTex;
layout(set = 0, binding = 3)              uniform CameraStateBlock { CameraState camera; };

NAMED_UNIFORMS(constants,
    mat4 lightProjectionFromView;
)

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 targetSize = imageSize(projectedShadowImg);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, targetSize)))
        return;

    vec2 uv = (vec2(pixelCoord) + 0.5) / vec2(targetSize);
    float sceneDepth = texture(sceneDepthTex, uv).x;
    vec3 viewSpacePosition = unprojectUvCoordAndDepthToViewSpace(uv, sceneDepth, camera);

    float shadowFactor = evaluateShadow(shadowMapTex, constants.lightProjectionFromView, viewSpacePosition);

    imageStore(projectedShadowImg, pixelCoord, vec4(shadowFactor, 0.0, 0.0, 0.0));
}
