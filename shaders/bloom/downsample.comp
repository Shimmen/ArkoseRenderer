#version 460

#include <common/sampling.glsl>

layout(set = 0, binding = 0, rgba16f) restrict writeonly uniform image2D targetImg;
layout(set = 0, binding = 1, rgba16f) restrict readonly  uniform image2D sourceImg;

vec4 sampleSourceBilinear(vec2 uv)
{
    vec2 clampedUv = clamp(uv, vec2(0.0), vec2(1.0));
    vec2 coord = clampedUv * vec2(imageSize(sourceImg));

    ivec2 iCoord = ivec2(floor(coord - vec2(0.5)));
    vec2 fCoord = fract(coord);

    vec4 bl = imageLoad(sourceImg, iCoord + ivec2(0, 0));
    vec4 br = imageLoad(sourceImg, iCoord + ivec2(1, 0));
    vec4 tl = imageLoad(sourceImg, iCoord + ivec2(0, 1));
    vec4 tr = imageLoad(sourceImg, iCoord + ivec2(1, 1));
    return bilinearFilter(tl, tr, bl, br, fCoord);
}

// See https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare
vec4 codCustomDownsample(vec2 uv, vec2 targetTexelSize)
{
    vec4 color = vec4(0.0);

    vec2 off = targetTexelSize;
    vec2 halfOff = off / 2.0;

    // Center 4x4 box, weight 0.5
    color += (0.5 / 4.0) * sampleSourceBilinear(uv + vec2(-halfOff.x, -halfOff.y));
    color += (0.5 / 4.0) * sampleSourceBilinear(uv + vec2(-halfOff.x, +halfOff.y));
    color += (0.5 / 4.0) * sampleSourceBilinear(uv + vec2(+halfOff.x, -halfOff.y));
    color += (0.5 / 4.0) * sampleSourceBilinear(uv + vec2(+halfOff.x, +halfOff.y));

    // Top-left & top-right & bottom-left & bottom right samples (not shared), weight 0.125
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(-off.x, -off.y));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(-off.x, +off.y));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(+off.x, -off.y));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(+off.x, +off.y));

    // Centered "plus sign", where every sample is shared by two 4x4 boxes, weight 0.125
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(-off.x, 0.0));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(+off.x, 0.0));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(0.0, -off.y));
    color += (0.125 / 4.0) * sampleSourceBilinear(uv + vec2(0.0, +off.y));

    // Center sample, shared by all four offset 4x4 boxes, weight 0.125
    // (divide by 4 to get each sample in the 4x4, but then multiply with 4 since the overlap)
    color += 0.125 * sampleSourceBilinear(uv);

    return color;
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 targetSize = imageSize(targetImg);

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, targetSize)))
        return;

    vec2 targetTexelSize = 1.0 / vec2(targetSize);
    vec2 uv = (vec2(pixelCoord) + 0.5) * targetTexelSize;
    vec4 color = codCustomDownsample(uv, targetTexelSize);

    imageStore(targetImg, pixelCoord, color);
}
