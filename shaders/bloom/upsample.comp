#version 460

#include <common/sampling.glsl>

layout(set = 0, binding = 0, rgba16f) restrict writeonly uniform image2D targetImg;              // A' : level0 upsampled     |
layout(set = 0, binding = 1, rgba16f) restrict readonly uniform image2D nextLevelUpsampledImg;   // B' : level1 upsampled     |=>  A' = A + blur(B')
layout(set = 0, binding = 2, rgba16f) restrict readonly uniform image2D sameLevelDownsampledImg; // A  : level0 downsampled   |

layout(push_constant) uniform PushConstants {
    float blurRadius;
};

vec4 sampleNextLevelUpsampledBilinear(vec2 uv)
{
    ivec2 sourceMax = imageSize(nextLevelUpsampledImg) - ivec2(1, 1);

    vec2 clampedUv = clamp(uv, vec2(0.0), vec2(1.0));
    vec2 coord = clampedUv * vec2(sourceMax);

    ivec2 iCoord = ivec2(coord);
    vec2 fCoord = fract(coord);

    vec4 tl = imageLoad(nextLevelUpsampledImg, min(iCoord + ivec2(0, 0), sourceMax));
    vec4 tr = imageLoad(nextLevelUpsampledImg, min(iCoord + ivec2(1, 0), sourceMax));
    vec4 bl = imageLoad(nextLevelUpsampledImg, min(iCoord + ivec2(0, 1), sourceMax));
    vec4 br = imageLoad(nextLevelUpsampledImg, min(iCoord + ivec2(1, 1), sourceMax));
    return bilinearFilter(tl, tr, bl, br, fCoord);
}

// See https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare
vec4 tent3x3Upsample(vec2 uv, vec2 offset)
{
    vec4 color = 4.0 * sampleNextLevelUpsampledBilinear(uv);

    color += 2.0 * sampleNextLevelUpsampledBilinear(uv + vec2(-offset.x, 0.0));
    color += 2.0 * sampleNextLevelUpsampledBilinear(uv + vec2(+offset.x, 0.0));
    color += 2.0 * sampleNextLevelUpsampledBilinear(uv + vec2(0.0, -offset.y));
    color += 2.0 * sampleNextLevelUpsampledBilinear(uv + vec2(0.0, +offset.y));

    color += 1.0 * sampleNextLevelUpsampledBilinear(uv + vec2(-offset.x, -offset.y));
    color += 1.0 * sampleNextLevelUpsampledBilinear(uv + vec2(-offset.x, +offset.y));
    color += 1.0 * sampleNextLevelUpsampledBilinear(uv + vec2(+offset.x, -offset.y));
    color += 1.0 * sampleNextLevelUpsampledBilinear(uv + vec2(+offset.x, +offset.y));

    return color / vec4(16.0);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 targetSize = imageSize(targetImg);

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, targetSize)))
        return;

    vec2 uv = (vec2(pixelCoord) + 0.5) / vec2(targetSize);
    vec2 offset = vec2(1.0, targetSize.x / targetSize.y) * vec2(blurRadius);
    vec4 blurred = tent3x3Upsample(uv, offset);

    vec4 original = imageLoad(sameLevelDownsampledImg, pixelCoord);

    // A' = A + blur(B')
    vec4 target = original + blurred;
    imageStore(targetImg, pixelCoord, target);
}
