#version 460
#extension GL_NV_ray_tracing : require

#include <rt-direct-light/common.glsl>
#include <common/spherical.glsl>
#include <shared/CameraState.h>

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1) uniform CameraStateBlock { CameraState camera; };
layout(set = 0, binding = 2) uniform sampler2D environmentMap;
layout(set = 0, binding = 3, rgba16f) uniform image2D u_image;

// TODO: It would be nice to actually support the names uniforms API for ray tracing..
layout(push_constant) uniform PushConstantBlock
{
	PushConstants pushConstants;
};

layout(location = 0) rayPayloadNV RayPayload payload;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = camera.worldFromView * vec4(0, 0, 0, 1);
	vec4 target = camera.viewFromProjection * vec4(d.x, d.y, 1.0, 1.0);
	vec4 direction = camera.worldFromView * vec4(normalize(target.xyz / target.w), 0.0);

	float tmin = camera.near;
	float tmax = camera.far;

	int numHits = 0;
	vec3 color = vec3(0.0);

	// Opaque
	{
		uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsCullBackFacingTrianglesNV;
		uint cullMask = RT_HIT_MASK_OPAQUE;

		traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		if (payload.hitT != HIT_T_MISS) {
			tmax = payload.hitT;
			color = payload.color;
			numHits += 1;
		}
	}

	// Masked
	{
		uint rayFlags = gl_RayFlagsNoOpaqueNV;
		uint cullMask = RT_HIT_MASK_MASKED;

		traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		if (payload.hitT != HIT_T_MISS) {
			tmax = payload.hitT;
			color = payload.color;
			numHits += 1;
		}
	}

	// Blended
	{
		// TODO: Maybe just use stochastic transparency and count this as masked?
	}

	// Draw environment if miss
	if (numHits == 0) {
		vec2 sampleUv = sphericalUvFromDirection(direction.xyz);
		color = pushConstants.environmentMultiplier * texture(environmentMap, sampleUv).rgb;
	}

	imageStore(u_image, ivec2(gl_LaunchIDNV.xy), vec4(color, 0.0));
}
