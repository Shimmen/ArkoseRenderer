#version 460

#include <common.glsl>
#include <common/random.glsl>
#include <common/spherical.glsl>

layout(set = 0, binding = 0, rg16f) uniform writeonly image2D     targetImg;
layout(set = 0, binding = 1)        uniform           samplerCube distanceCube;

layout(push_constant) uniform PushConstants {
    float filterRadius;
    uint frameIndex;
};

vec2 sampleDistancesInDirection(vec3 direction)
{
    vec4 distances = texture(distanceCube, direction);

    // TODO: We should probably clear these to the camera far value (and its square for y) instead
    if (distances.x == 0.0) {
        const vec2 cameraProjectionFarPlanes = vec2(10.0, 100.0);
        return cameraProjectionFarPlanes;
    }

    return distances.rg;
}

vec2 sampleFilteredDistancesForNormal(vec3 N)
{
    const int numSamples = 128;

    vec2 filteredDistances = vec2(0.0);
    for (int i = 0; i < numSamples; ++i) {

        vec3 rayDirection = N + clamp(filterRadius, 0.01, 0.99) * randomPointOnSphere();
        vec2 distances = sampleDistancesInDirection(rayDirection);
        filteredDistances += distances;
    }

    return filteredDistances / float(numSamples);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 targetSize = imageSize(targetImg);

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, targetSize)))
        return;

    uint seed = (pixelCoord.x + targetSize.x * pixelCoord.y) + frameIndex * (targetSize.x * targetSize.y);
    seedRandom(seed);

    vec2 uv = (vec2(pixelCoord) + vec2(0.5)) / vec2(targetSize);
    vec3 direction = normalize(directionFromSphericalUv(uv));

    vec2 distances = sampleFilteredDistancesForNormal(direction);
    imageStore(targetImg, pixelCoord, vec4(distances, 0, 0));
}
