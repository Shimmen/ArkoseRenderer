#version 460

#include <common.glsl>
#include <common/brdf.glsl>
#include <common/octahedral.glsl>
#include <common/random.glsl>
#include <common/spherical.glsl>
#include <shared/ProbeDebug.h>

layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D     irradianceImg;
layout(set = 0, binding = 1)          uniform           samplerCube radianceCube;
layout(set = 0, binding = 2)          uniform           sampler2D   skyViewTex;

layout(push_constant) uniform PushConstants {
    float environmentMultiplier;
    uint frameIndex;
};

vec3 sampleRadianceInDirection(vec3 direction, out float weight)
{
    vec4 radianceFull = texture(radianceCube, direction);
    vec3 radiance = radianceFull.rgb;

    // TODO: Cubemap solid angles should go here!! Well, at least a relative solid angle in [0, 1]
    //  Something based on this: http://www.rorydriscoll.com/2012/01/15/cubemap-texel-solid-angle/
    weight = 1.0;

    // TODO: It probably be faster if we didn't sample the sky-view here.
    //  We should probably put it in the cube texture to begin with..
    if (radianceFull.a < 1e-2f) {
        const vec3 skyViewDirection = vec3(direction.x, -direction.y, direction.z);
        vec2 sampleUv = sphericalUvFromDirection(skyViewDirection);
        const float refSolidAngleCheat = 1.0;
        weight = sphericalMappingPixelSolidAngle(skyViewDirection, refSolidAngleCheat);
        radiance += environmentMultiplier * texture(skyViewTex, sampleUv).rgb;
    }

    radiance *= weight;
    return radiance;
}

vec3 sampleIrradianceForNormal(vec3 N)
{
    const int numSamples = 1024;

    vec3 irradiance = vec3(0.0);
    float weight = 0.0;

    for (int i = 0; i < numSamples; ++i) {

        vec3 rayDirection = randomPointOnSphere();
        if (dot(rayDirection, N) < 0.0) {
            rayDirection = -rayDirection;
        }

        float sampleWeight;
        vec3 radiance = sampleRadianceInDirection(rayDirection, sampleWeight);

        float LdotN = max(0.0, dot(N, rayDirection));
        irradiance += LdotN * diffuseBRDF() * radiance;

        weight += sampleWeight;
    }

    return irradiance / weight;
}

vec3 sampleIrradianceForNormalSphericalFibonacci(vec3 N)
{
    const int numSamples = 256;

    // Create TBN frame for rotating spherical fibonacci points in direction of N.
    // The rotation around N doesn't really matter, as long as it temporaly consistent

    vec3 tangent = vec3(1, 0, 0);
    if ((abs(dot(tangent, N)) - 1.0) < 1e-4)
        tangent = vec3(0, 1, 0);
    vec3 bitangent = cross(N, tangent);
    tangent = cross(bitangent, N);
    mat3 tbn = mat3(tangent, bitangent, N);

    // From Spherical Fibonacci Point Sets for Illumination Integrals (https://mribar03.bitbucket.io/articles/2013/CGF_SF.pdf)

    const float deltaPhi = PI * (3.0 * - sqrt(5.0)); // (golden angle)
    const float deltaZ =  1.0 / float(numSamples);

    float z = 1.0 - (deltaZ / 2.0);
    float phi = 0.0;

    vec3 irradiance = vec3(0.0);
    float weight = 0.0;

    for (int j = 1; j <= numSamples; ++j) {

        // Spherical coordinates for point j
        float z_j = z;
        float theta_j = acos(z_j);
        float phi_j = mod(phi, TWO_PI);

        // Sample radiance
        {
            float sinTheta_j = sin(theta_j);
            vec3 dir = vec3(
                sinTheta_j * cos(phi_j),
                sinTheta_j * sin(phi_j),
                z_j
            );

            vec3 worldRayDirection = tbn * normalize(dir);

            float sampleWeight;
            vec3 radiance = sampleRadianceInDirection(worldRayDirection, sampleWeight);

            float LdotN = max(0.0, dot(N, worldRayDirection));
            irradiance += LdotN * diffuseBRDF() * radiance;

            weight += sampleWeight;
        }

        // Step to next point
        z -= deltaZ;
        phi += deltaPhi;
    }

    return irradiance / weight;
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 targetSize = imageSize(irradianceImg);

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, targetSize)))
        return;

    uint seed = (pixelCoord.x + targetSize.x * pixelCoord.y) + frameIndex * (targetSize.x * targetSize.y);
    seedRandom(seed);

    vec2 uv = (vec2(pixelCoord) + vec2(0.5)) / vec2(targetSize);
    vec3 direction = normalize(directionFromSphericalUv(uv));

#if PROBE_DEBUG_HIGH_RES_VIZ
    // To save your GPU from crashing, when doing a high res visualization (for debugging)
    // don't do the expensive irradiance filtering which is super slow for large textures.
    float sampleWeight;
    vec3 radiance = sampleRadianceInDirection(direction, sampleWeight);
    imageStore(irradianceImg, pixelCoord, vec4(sampleWeight * radiance, 1.0));
#else
    vec3 irradiance = sampleIrradianceForNormal(direction);
    //vec3 irradiance = sampleIrradianceForNormalSphericalFibonacci(direction);
    imageStore(irradianceImg, pixelCoord, vec4(irradiance, 1.0));
#endif
}
